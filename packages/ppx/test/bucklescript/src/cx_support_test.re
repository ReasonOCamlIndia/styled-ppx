open Jest;
Emotion.loadSerializer();

let testData = [
  ("opacity", [%cx "opacity: 0.9"], CssJs.style(. [| CssJs.opacity(0.9) |])),
];
/* let testData = [
  ([%cx "opacity: 0.9"], ),
  ([%cx "overflow-x: clip"], ),
  ([%cx "box-shadow: 1px 54px 1px blue"], ),
  ([%cx "box-shadow: 2px 3px blue"], ),
  ([%cx "text-shadow: 0px 0px blue"], ),
  ([%cx "text-shadow: 10px 0px 0px blue"], ),
  ([%cx {| overflow-y: visible; overflow-x: visible; overflow: hidden; |}], ),
  ([%cx "visibility: visible"], ),
  ([%cx "hyphens: manual"], ),
  (//  [%cx "stroke: none"], ),
  ([%cx "order: 0"], ),
  ([%cx "direction: ltr"], ),
  (//  [%cx "content: normal"], ),
  ([%cx "clear: none"], ),
  ([%cx "box-sizing: content-box"], ),
  ([%cx "box-sizing: border-box"], ),
  (// [%cx "box-shadow: none"], ),
  (// [%cx "border-collapse: separate"], ),
  ([%cx "transition-property: all"], ),
  ([%cx "transition-duration: 0.5s"], ),
  ([%cx "transition-timing-function: ease"], ),
  ([%cx "transition-timing-function: step-end"], ),
  ([%cx "transition-delay: 0.5s"], ),
  ([%cx "transition: none;"], ),
  ([%cx "transition: ease 250ms"], ),
  ([%cx "transition: ease 250ms"], ),
  ([%cx "transition: margin-left 4s ease-in-out 1s"], ),
  ([%cx "transition: width 2s, height 2s, background-color 2s, transform 2s"], ),
  ([%cx "animation-name: slidein"], ),
  ([%cx "animation-duration: 3s"], ),
  ([%cx "animation-timing-function: ease"], ),
  ([%cx "animation-delay: 3s"], ),
  ([%cx "animation-direction: alternate"], ),
  ([%cx "animation-iteration-count: infinite"], ),
  ([%cx "animation-iteration-count: 1"], ),
  ([%cx "animation-iteration-count: 2, 1, 5"], ),
  ([%cx "animation-fill-mode: backwards"], ),
  (//  [%cx "animation-play-state: "], ),
  (//  [%cx "animation: 3s infinite alternate slidein"], ),
  ([%cx "transform: translate(10px, 10px)"], ),
  ([%cx "transform: translateX(10px) rotate(10deg) translateY(5px)"], ),
  ([%cx "transform: matrix(1.0, 2.0, 3.0, 4.0, 5.0, 6.0)"], ),
  ([%cx "transform: translate(12px, 50%)"], ),
  ([%cx "transform: translateX(2em)"], ),
  ([%cx "transform: translateY(3in)"], ),
  ([%cx "transform: scale(2, 0.5)"], ),
  ([%cx "transform: scaleX(2)"], ),
  ([%cx "transform: scaleY(0.5)"], ),
  ([%cx "transform: rotate(0.5turn)"], ),
  ([%cx "transform: skew(30deg, 20deg)"], ),
  ([%cx "transform: skewX(30deg)"], ),
  ([%cx "transform: skewY(1.07rad)"], ),
  [%cx
    "transform: matrix3d(1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0)"
  (], ),
  ([%cx "transform: translate3d(12px, 50%, 3em)"], ),
  ([%cx "transform: translateZ(2px)"], ),
  ([%cx "transform: scale3d(2.5, 1.2, 0.3)"], ),
  ([%cx "transform: scaleZ(0.3)"], ),
  ([%cx "transform: rotate3d(1, 2.0, 3.0, 10deg)"], ),
  ([%cx "transform: rotateX(10deg)"], ),
  ([%cx "transform: rotateY(10deg)"], ),
  ([%cx "transform: rotateZ(10deg)"], ),
  ([%cx "transform: perspective(17px)"], ),
  ([%cx "font-family: 'Open Sans', '-system', sans-serif"], ),
  ([%cx "transform: initial"], ),
  ([%cx "flex-flow: row wrap"], ),
  ([%cx "flex: 1 2 content"], ),
  ([%cx "flex: unset"], ),
  // css-sizing-3
  ([%cx "width: auto"], ),
  ([%cx "width: 0"], ),
  ([%cx "height: 5px"], ),
  ([%cx "min-width: 5%"], ),
  ([%cx "min-height: 5em"], ),
  ([%cx "max-width: none"], ),
  ([%cx "max-height: 3vh"], ),
  ([%cx "box-sizing: border-box"], ),
  // css-box-3
  ([%cx "margin-top: auto"], ),
  ([%cx "margin-right: 1px"], ),
  ([%cx "margin-bottom: 2px"], ),
  ([%cx "margin-left: 3px"], ),
  ([%cx "margin: 1px"], ),
  ([%cx "margin: 1px 2px"], ),
  ([%cx "margin: 1px 2px 3px"], ),
  ([%cx "margin: 1px 2px 3px 4px"], ),
  ([%cx "padding-top: 0"], ),
  ([%cx "padding-right: 1px"], ),
  ([%cx "padding-bottom: 2px"], ),
  ([%cx "padding-left: 3px"], ),
  ([%cx "padding: 1px"], ),
  ([%cx "padding: 1px 2px"], ),
  ([%cx "padding: 1px 2px 3px"], ),
  ([%cx "padding: 1px 2px 3px 4px"], ),
  // css-color-4
  ([%cx "color: #012"], ),
  ([%cx "color: #0123"], ),
  ([%cx "color: #012345"], ),
  ([%cx "color: #01234567"], ),
  ([%cx "color: blue"], ),
  ([%cx "color: currentcolor"], ),
  ([%cx "color: transparent"], ),
  ([%cx "color: rgb(1 2 3)"], ),
  ([%cx "color: rgb(1 2 3 / .4)"], ),
  ([%cx "color: rgba(1, 2, 3)"], ),
  ([%cx "color: rgba(1, 2, 3, .4)"], ),
  ([%cx "color: hsl(120deg 100% 50%)"], ),
  ([%cx "opacity: 0.5"], ),
  ([%cx "opacity: 60%"], ),
  // css-images-4
  ([%cx "object-fit: fill"], ),
  ([%cx "object-position: right bottom"], ),
  // css-backgrounds-3
  ([%cx "background-color: red"], ),
  ([%cx "border-top-color: blue"], ),
  ([%cx "border-right-color: green"], ),
  ([%cx "border-bottom-color: purple"], ),
  ([%cx "border-left-color: #fff"], ),
  ([%cx "border-top-width: 15px"], ),
  ([%cx "border-right-width: 16px"], ),
  ([%cx "border-bottom-width: 17px"], ),
  ([%cx "border-left-width: 18px"], ),
  ([%cx "border-top-left-radius: 12%"], ),
  ([%cx "border-top-right-radius: 15%"], ),
  ([%cx "border-bottom-left-radius: 14%"], ),
  ([%cx "border-bottom-right-radius: 13%"], ),
  ([%cx "box-shadow: 12px 12px 2px 1px rgba(0, 0, 255, .2)"], ),
  [%cx
    "box-shadow: 12px 12px 2px 1px rgba(0, 0, 255, .2), 13px 14px 5px 6px rgba(2, 1, 255, 50%)"
  (], ),
  // css-overflow-3
  ([%cx "overflow-x: auto"], ),
  ([%cx "overflow-y: hidden"], ),
  ([%cx "overflow: scroll"], ),
  ([%cx "overflow: scroll visible"], ),
  ([%cx "text-overflow: clip"], ),
  ([%cx "text-overflow: ellipsis"], ),
  // css-text-3
  ([%cx "text-transform: capitalize"], ),
  ([%cx "white-space: break-spaces"], ),
  ([%cx "word-break: keep-all"], ),
  ([%cx "overflow-wrap: anywhere"], ),
  ([%cx "word-wrap: normal"], ),
  (// [%cx "text-align: start"], ),
  ([%cx "text-align: left"], ),
  ([%cx "word-spacing: normal"], ),
  ([%cx "word-spacing: 5px"], ),
  ([%cx "letter-spacing: normal"], ),
  ([%cx "letter-spacing: 5px"], ),
  ([%cx "text-indent: 5%"], ),
  // not supported
  ([%cx "-moz-text-blink: blink"], ),
  ([%cx "display: -webkit-inline-box"], ),
  // media-query
  ([%cx "@media (min-width: 30em) and (min-height: 20em) { color: brown; }"], ),
]; */

Belt.List.forEachWithIndex(testData, (index, (name, cssIn, emotionOut)) => {
  open Expect;
  test(string_of_int(index) ++ "Supports " ++ name ++ " property", () => {
    expect(cssIn) |> toMatch(emotionOut)
  })
});
